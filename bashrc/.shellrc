. /etc/profile

# Environment variables
export GPG_TTY=$(tty)
export GTK_IM_MODULE=ibus
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=ibus
export TERM=xterm
export EDITOR=nvim
export CODE_EDITOR=nvim
export BROWSER=firefox
export PAGER=less
export XDG_DATA_HOME=~/.local/share
export XDG_CONFIG_HOME=~/.config
export XDG_CONFIG_DIR=$XDG_CONFIG_HOME
export XDG_CACHE_HOME=~/.cache
export GOPATH=$HOME/dev/go/workspace
export WORKON_HOME=~/.virtualenvs
export ANDROID_SDK_TOOLS_PATH=~/android-sdk-linux/tools
export ANDROID_SDK_PLATFORM_TOOLS_PATH=~/android-sdk-linux/platform-tools
export ANDROID_SDK_BUILD_TOOLS_PATH=~/android-sdk-linux/build-tools/23.0.3
export PATH=~/bin:~/.local/bin:$GOPATH/bin:~/.cargo/bin:/usr/local/bin:/sbin:/usr/sbin:$ANDROID_SDK_TOOLS_PATH:$ANDROID_SDK_PLATFORM_TOOLS_PATH:$ANDROID_SDK_BUILD_TOOLS_PATH:~/.npm-global/bin:$PATH
#export PATH=/usr/lib/go-1.8/bin:~/bin:~/.local/bin:$GOPATH/bin:/usr/local/bin:/sbin:/usr/sbin:$ANDROID_SDK_TOOLS_PATH:$ANDROID_SDK_PLATFORM_TOOLS_PATH:$ANDROID_SDK_BUILD_TOOLS_PATH:$PATH
#export LDFLAGS=/usr/local/lib
#export CFLAGS=/usr/local/include
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
export LD_LIBRARY_PATH=/usr/local/lib
export HISTTIMEFORMAT="%F %T : "
#export VDPAU_DRIVER=va_gl # which drive file to use. Mpv issue if not set.
#export PYTHONSTARTUP=/home/max/.pystartup

# Set up python virtualenvs
    if command -v virtualenvwrapper.sh >/dev/null 2>&1; then
. $(which virtualenvwrapper.sh)
    fi

# Set up ruby gems
    if command -v ruby >/dev/null 2>&1; then
    PATH=$(ruby -r rubygems -e "puts Gem.path[0]")/bin:$PATH
    fi

# Aliases
    alias gpg=gpg2
    alias vim=nvim
    alias grep='grep --color=auto'
    alias rg='rg --color=auto'
    alias less='less -Rs'
    alias egrep='egrep --color=auto'
    alias ls='exa'
    alias ll='exa -glFh'
    alias lla='ll -a'
    alias du='du -h'
    alias df='df -h'
    alias tree='tree -C'
    alias updatedb='sudo updatedb'
    alias myip='curl ifconfig.me'
    alias csi='rlwrap csi'
    alias chicken='rlwrap csi'
    alias maxima='rlwrap maxima'
    alias mplayer='mplayer -noborder'
    alias acme='SHELL=rc acme'
    alias open='xdg-open'
    alias r='xrdb ~/.Xresources'
    alias forge='export GIT_SSL_NO_VERIFY=1'
    alias vpnctn='sudo vpnc --username eisenbar1u@etu --id Etudiants-UL --gateway vpn.lothaire.net'
    LORIAFS_MNT_DIR="~/dev/carbone/loriafs"
    alias mntloriafs="sshfs -o reconnect,workaround=all,ServerAliveInterval=10,ServerAliveCountMax=3 jeisenba@loria.loria.fr:/users/jeisenba/ $LORIAFS_MNT_DIR"
    alias umntloriafs="sudo umount $LORIAFS_MNT_DIR"
    alias vpnloria='sudo openconnect --script /usr/share/vpnc-scripts/vpnc-script --cafile=$HOME/dev/loria/chain-TCS-2015.pem https://vpn.inria.fr'
    alias sudo="sudo "
    alias pass='PASSWORD_STORE_ENABLE_EXTENSIONS=true pass'
    alias sus='systemctl suspend'
    alias hib='systemctl hibernate'
    alias lt=$'java -cp ~/languageTool-4.6/languagetool-server.jar org.languagetool.server.HTTPServer --port 8081 --allow-origin \'*\' --languageModel ~/ngrams/'

    export WORKON_HOME=~/.virtualenvs
    mkdir -p $WORKON_HOME
    # source ~/.local/bin/virtualenvwrapper.sh

# Functions to manage compilation cache
    env_dir=/usr/local/bin

    createccache() {
        if [ ! -x $env_dir/ccache ]; then
            cwd=$(pwd)
                sudo mkdir -p $env_dir
                sudo cp $(which ccache) $env_dir
                cd $env_dir
                for compiler in gcc g++ cc c++; do
                    sudo ln -s ccache $env_dir/$compiler
                        done
                        cd $cwd
                        fi
    }

exitccache() {
    export PATH="$_old_PATH"
        export PS1="$_old_PS1"
        unset _old_PATH
        unset _old_PS1
}

enterccache() {
    export _old_PATH="$PATH"
        export _old_PS1="$PS1"
        export PATH="$env_dir:$PATH"
        export PS1="(ccache) $PS1" 
        echo 'entering ccache environment...'
        echo 'type exitcache to quit'
}

function swap()         
{
    local TMPFILE=tmp.$$
        mv "$1" $TMPFILE
        mv "$2" "$1"
        mv $TMPFILE "$2"
}

function conj() 
{
    french-conjugator --pronouns $1
}

function conj-ind-present() 
{
    french-conjugator --pronouns --mode=indicative --tense=present $1
}

man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

# Use ~~ as the trigger sequence instead of the default **
export FZF_COMPLETION_TRIGGER='~~'

# Options to fzf command
export FZF_COMPLETION_OPTS='+c -x'

# Use fd instead of find
# Follows symbolic links, include hidden files, exclude .git
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}
